ðŸ“‘ Project Report

Title: Bookstore REST API


---

1. Introduction

The objective of this project is to design and implement a Bookstore REST API that manages an inventory of books. It allows users to perform basic operations such as adding, retrieving, updating, and deleting books. The API is built using FastAPI framework, with SQLite as the database and SQLAlchemy ORM for database interaction.


---

2. Objectives

To build a REST API for managing a bookstore inventory.

To implement CRUD operations using FastAPI.

To integrate SQLite database for persistent storage.

To test the API using Postman.

To document the API endpoints for easy understanding.



---

3. Tools & Technologies Used

Programming Language: Python 3.12

Framework: FastAPI

Database: SQLite

ORM: SQLAlchemy

Validation: Pydantic

Testing Tool: Postman

Documentation: Swagger UI (auto-generated by FastAPI)



---

4. System Design

4.1 Database Schema

Table: books

Column	Type	Description

id	INTEGER (PK)	Unique identifier
title	TEXT	Title of the book
author	TEXT	Author of the book
price	REAL	Price of the book
quantity	INTEGER	Number of copies available



---

4.2 API Endpoints

Method	Endpoint	Description

GET	/	Welcome message
POST	/books/	Add a new book
GET	/books/	Get all books
GET	/books/{id}	Get book by ID
PUT	/books/{id}	Update book details
DELETE	/books/{id}	Delete book



---

5. Implementation

Created main.py containing FastAPI app and CRUD routes.

Configured SQLite database (books.db) with SQLAlchemy ORM.

Implemented data models using Pydantic for validation.

Tested API using Postman collection with sample requests.

Verified Swagger UI documentation at http://127.0.0.1:8000/docs.



---

6. Testing

Imported Postman collection Bookstore_API.postman_collection.json.

Tested CRUD operations:

Added books successfully.

Retrieved all books and specific books by ID.

Updated book details.

Deleted books.


Verified expected responses with status codes (200 OK, 201 Created, 404 Not Found).



---

7. Results

The API successfully manages the bookstore inventory.

Supports full CRUD functionality.

Integrated with Postman for testing.

Provides easy-to-use documentation through Swagger UI.



---

8. Conclusion

This project successfully demonstrates the development of a REST API using FastAPI. It provides a scalable and flexible solution for inventory management. Future enhancements may include search & filtering, authentication, and deployment on cloud platforms.


---

9. Deliverables

main.py (FastAPI source code)

books.db (SQLite database with sample books)

Bookstore_API.postman_collection.json (Postman test collection)

README.md (Project documentation)

Project Report (this document)



---